#配置properties文件路径，避免控制台不输出
#PropertyConfigurator.configure("./src/log4j.properties"); //当前项目路径为.
log4j.rootLogger=info,stdout

### set tesecase log level ###
#log4j.logger.com.java=info, stdout

#log4j.logger.com.java=info, stdout, file

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t:%c ] - [ %p ] %m%n
#[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} %L method:%l%n%m%n

### Define the file appender ###
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%t-%c]-[%p]  %m%n
log4j.appender.file.File=logs/debug.log
#log4j.appender.file.MaxFileSize=1024KB
#log4j.appender.file.MaxBackupIndex=10 #只保存10个备份文件
#log4j.appender.file.ImmediateFlush=true
log4j.appender.file.Threshold=debug
log4j.appender.file.Append=true
#频率 指定monthly(每月)、weekly(每周)、daily(每天)、half-daily(每半天)、hourly(每小时)和minutely(每分钟)六个频度
log4j.appender.file.DatePattern=_MM-dd_HH
log4j.appender.file.encoding=UTF-8

#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.File = ./logs/debug.log
#log4j.appender.D.Append = true
#log4j.appender.D.Threshold = DEBUG
#log4j.appender.D.layout = org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2011-10-18 22:10:28,921
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%c: 输出日志信息所属的类目，通常就是所在类的全名
#%t: 输出产生该日志事件的线程名
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个"%"字符
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%m: 输出代码中指定的消息,产生的日志具体信息
#%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行